// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using custom_randomizer_api.Models;

#nullable disable

namespace customrandomizerapi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250817225221_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.RandomizerModels.Randomizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("Randomizers");
                });

            modelBuilder.Entity("Models.TraitModels.Trait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RandomizerId")
                        .HasColumnType("integer");

                    b.Property<int>("TraitType")
                        .HasColumnType("integer");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("RandomizerId");

                    b.ToTable("Traits");

                    b.HasDiscriminator<int>("TraitType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("custom_randomizer_api.Models.TraitOptions.TraitOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageKey")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("TraitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TraitId");

                    b.ToTable("TraitOptions");
                });

            modelBuilder.Entity("Models.TraitModels.BasicTrait", b =>
                {
                    b.HasBaseType("Models.TraitModels.Trait");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Models.TraitModels.ColorTrait", b =>
                {
                    b.HasBaseType("Models.TraitModels.Trait");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Models.TraitModels.NumberTrait", b =>
                {
                    b.HasBaseType("Models.TraitModels.Trait");

                    b.Property<int>("MaxNum")
                        .HasColumnType("integer");

                    b.Property<int>("MinNum")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Models.TraitModels.Trait", b =>
                {
                    b.HasOne("Models.RandomizerModels.Randomizer", "Randomizer")
                        .WithMany("Traits")
                        .HasForeignKey("RandomizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Randomizer");
                });

            modelBuilder.Entity("custom_randomizer_api.Models.TraitOptions.TraitOption", b =>
                {
                    b.HasOne("Models.TraitModels.BasicTrait", "BasicTrait")
                        .WithMany("TraitOptions")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicTrait");
                });

            modelBuilder.Entity("Models.RandomizerModels.Randomizer", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("Models.TraitModels.BasicTrait", b =>
                {
                    b.Navigation("TraitOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
